buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
  }
}

plugins {
    id "net.ltgt.apt" version "0.9"
}

apply plugin: 'application';
apply plugin: 'java';
apply plugin: 'findbugs';
apply plugin: 'pmd';
apply plugin: 'jacoco';
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'


// -SNAPSHOT is added if the release task is not set
version = '2'
archivesBaseName = 'STT'

def javaHome = System.properties['java.home']

sourceCompatibility = 1.8
mainClassName='org.stt.StartWithJFX'

ext.mainClass = mainClassName

configurations {
	antlr4 {
		description = "ANTLR4"
	}
}

ext.antlr = [
	antlrDestPkg: "org.stt.g4",
	antlrSrcDir : "src/main/antlr",
	antlrGenDir : "gen-src/antlr/java"
]

clean {
	delete antlr.antlrGenDir
}

sourceSets {
	main.java.srcDirs += antlr.antlrGenDir
	main.resources.srcDirs += antlr.antlrSrcDir
	test.java.srcDirs += antlr.antlrGenDir
	test.resources.srcDirs += antlr.antlrGenDir
}

findbugs {
	excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

repositories {
	mavenCentral()
	maven {
		url "http://oss.sonatype.org/content/groups/public/"
	}
}


dependencies {
	antlr4  group: "org.antlr", name: "antlr4", version: "4.6"
	compile group: "org.antlr", name: "antlr4-runtime", version: "4.6"
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.7-M3'
    compile 'commons-io:commons-io:2.5'
	compile 'org.yaml:snakeyaml:1.18'
    compile 'com.google.dagger:dagger:2.10'
    compile 'javax.inject:javax.inject:1'
    apt  'com.google.dagger:dagger-compiler:2.10'
    compile 'net.engio:mbassador:1.3.0'
    compile 'org.controlsfx:controlsfx:8.40.12'

	testCompile 'junit:junit-dep:4.11'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile 'org.mockito:mockito-all:2.0.2-beta'
}

jar {
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest.attributes("Main-Class":"org.stt.StartWithJFX")
	manifest.attributes("JavaFX-Feature-Proxy":"None")
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task mkAntlrOutputDir {
    doLast {
        mkdir(antlr.antlrGenDir)
    }
}

task genAntlrSources(dependsOn: mkAntlrOutputDir, type: JavaExec) {
	// Based on https://github.com/xoom/gradle-antlr4-template/blob/master/build.gradle
	description = "Generates Java sources from an ANTLR4 grammar."

	inputs.dir file(antlr.antlrSrcDir)
	outputs.dir file(antlr.antlrGenDir)

	logger.info("ANTLR4 inputs: " + inputs)
	logger.info("ANTLR4 outputs: " + outputs)

	def grammars = fileTree(antlr.antlrSrcDir).include("**/*.g4")

	main = "org.antlr.v4.Tool"
	classpath = configurations.antlr4
	def pkg = antlr.antlrDestPkg.replaceAll("\\.", "/")
	args = [ "-o",
              "${antlr.antlrGenDir}/${pkg}",
			  /*"-atn", */
              "-visitor",
              "-package", antlr.antlrDestPkg,
		grammars.files
	].flatten()
}

task adjustAntlrGenDir(dependsOn: genAntlrSources) {
    doLast {
        description = "Adjusts files generated by ANTLR4 compilation."

        def pattern = ~/(\/\/ Generated from ).+[\/\\]([A-Za-z]+.g4 by ANTLR .*)/

        fileTree(antlr.antlrGenDir).include("**/*").each { f ->
            logger.info("Checking file $f")
            def r = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"))
            ArrayList<String> lines = new ArrayList()
            boolean rewrite = false
            r.eachLine { line ->
                def m = pattern.matcher(line)
                if (m.matches()) {
                    def line2 = m[0][1] + m[0][2]
                    if (!line.equals(line2)) {
                        rewrite = true;
                        line = line2;
                    }
                }
                lines.add(line)
            }
            r.close()

            if (rewrite) {
                logger.info("Rewrite file $f")

                def w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
                lines.each { line ->
                    w.writeLine(line)
                }
                w.close()
            }
        }
    }
}



compileJava {
	dependsOn adjustAntlrGenDir
}

clean {
	delete antlr.antlrGenDir
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.4'
}

task release(dependsOn: 'distZip') {
    doLast {
	    println "Built release for $project.version"
    }
}

gradle.taskGraph.whenReady {taskGraph ->
	if (!taskGraph.hasTask(release)) {
		version += '-SNAPSHOT'
	}
}
