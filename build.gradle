import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
  }
}

plugins {
    id "net.ltgt.apt" version "0.9"
}

apply plugin: 'application';
apply plugin: 'java';
apply plugin: 'findbugs';
apply plugin: 'pmd';
apply plugin: 'jacoco';
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'
apply plugin: 'antlr'

repositories {
    mavenCentral()
    maven {
        url "http://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url "http://maven.atlassian.com/content/repositories/atlassian-public/"
    }
}



// -SNAPSHOT is added if the release task is not set
version = '2'
archivesBaseName = 'STT'

def javaHome = System.properties['java.home']

sourceCompatibility = 1.8
mainClassName='org.stt.StartWithJFX'

ext.mainClass = mainClassName

findbugs {
	excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {
	antlr  group: "org.antlr", name: "antlr4", version: "4.7"
    compile group: "org.antlr", name: "antlr4-runtime", version: "4.7"
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.7-M5'
	compile 'org.yaml:snakeyaml:1.18'
    compile 'com.google.dagger:dagger:2.10'
    compile 'javax.inject:javax.inject:1'
    apt  'com.google.dagger:dagger-compiler:2.10'
    compile 'net.engio:mbassador:1.3.0'
    compile 'org.controlsfx:controlsfx:8.40.12'
	compile 'net.rcarz:jira-client:0.5'

    testCompile 'commons-io:commons-io:2.5'
	testCompile 'junit:junit-dep:4.11'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile 'org.mockito:mockito-all:2.0.2-beta'
}

jar {
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest.attributes("Main-Class":"org.stt.StartWithJFX")
	manifest.attributes("JavaFX-Feature-Proxy":"None")
}

processResources {
    filesMatching('version.info') {
        filter(ReplaceTokens, tokens: [
                "app.version": project.property("version")
        ])
    }
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.4'
}

task release(dependsOn: 'distZip') {
    doLast {
	    println "Built release for $project.version"
    }
}

gradle.taskGraph.whenReady {taskGraph ->
	if (!taskGraph.hasTask(release)) {
		version += '-SNAPSHOT'
	}
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
}